/*
 * @Version: 0.0.1
 * @Author: ider
 * @Date: 2020-07-27 21:17:00
 * @LastEditors: ider
 * @LastEditTime: 2020-08-24 01:51:59
 * @Description:
 */

/*
 * lmd官网
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 0.1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package api

import (
	"net/http"

	"github.com/gin-contrib/sessions"
	"github.com/gin-contrib/sessions/cookie"
	"github.com/gin-gonic/gin"
)

// Route is the information for every URI.
type Route struct {
	// Name is the name of this Route.
	Name string
	// Method is the string for the HTTP method. ex) GET, POST etc..
	Method string
	// Pattern is the pattern of the URI.
	Pattern string
	// HandlerFunc is the handler function of this route.
	HandlerFunc []gin.HandlerFunc
}

// Routes is the list of the generated Route.
type Routes []Route

// NewRouter returns a new router.
func NewRouter() *gin.Engine {
	router := gin.Default()

	store := cookie.NewStore([]byte("zhiku-secret"))
	router.Use(sessions.Sessions("auth", store))

	api := router.Group("/api")

	{
		for _, route := range RoutesPublic {
			switch route.Method {
			case http.MethodGet:
				api.GET(route.Pattern, route.HandlerFunc...)
			case http.MethodPost:
				api.POST(route.Pattern, route.HandlerFunc...)
			case http.MethodPut:
				api.PUT(route.Pattern, route.HandlerFunc...)
			case http.MethodDelete:
				api.DELETE(route.Pattern, route.HandlerFunc...)
			}
		}
	}

	return router
}

// Index is the index handler.
func Index(c *gin.Context) {
	c.String(http.StatusOK, "Hello World!")
}

// auth
// func AuthMiddle(c *gin.Context) {
// 	session := sessions.Default(c)
// 	v := session.Get("login")
// 	if v == nil {
// 		c.String(403, "没有登录")
// 		c.Abort()
// 	} else if v.(string) != "true" {
// 		c.String(403, "验证错误")
// 		c.Abort()
// 	}
// }

var RoutesPublic = Routes{
	{
		"Index",
		http.MethodGet,
		"/",
		[]gin.HandlerFunc{Index},
	},
	{
		"qihao",
		http.MethodGet,
		"/qihao",
		[]gin.HandlerFunc{QiHaoGet},
	},
	{
		"userdoubleboll",
		http.MethodPut,
		"/userdoubleboll",
		[]gin.HandlerFunc{UserDoubaleBollPut},
	},
	{
		"userdoubleboll",
		http.MethodGet,
		"/userdoubleboll",
		[]gin.HandlerFunc{UserDoubaleBollGet},
	},
	{
		"userdoubleboll",
		http.MethodDelete,
		"/userdoubleboll",
		[]gin.HandlerFunc{UserDoubaleBollDelete},
	},
}
